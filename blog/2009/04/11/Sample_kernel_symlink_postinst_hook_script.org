#+TITLE:     Sample kernel symlink postinst hook script
#+AUTHOR:    Manoj Srivastava
#+EMAIL:     srivasta@debian.org
#+DATE:      <Sat Apr 11 17:42:33 2009>
#+LANGUAGE:  en
#+OPTIONS:   H:0 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:nil tags:not-in-toc
#+INFOJS_OPT: view:showall toc:nil ltoc:nil mouse:underline buttons:nil path:http://orgmode.org/org-info.js
#+LINK_UP:   http://www.golden-gryphon.com/blog/manoj/
#+LINK_HOME: http://www.golden-gryphon.com/
[[!meta author="Manoj"]]
[[!meta license="GPL"]]
[[!meta title="Sample kernel symlink postinst hook script"]]
[[!tag software software/debian]]

With the new kernel-package hitting Sid today, and the fact that it no
longer does symlink handling by default, I thought it was time that we
had an example script that shows how to do that. This is a fairly full
featured script, feel free to cull down to use just what you want. 

I'll post a couple of ther scripts, if there is interest in this. BTW,
this script does far more than the old ~kernel-package~ =postisnt=
script ever did.

Have fun.

#+BEGIN_HTML
[[!syntax language=Bash linenumbers=1 bars=1 text="""
#!/bin/sh -
#                               -*- Mode: Sh -*- 
# 
# This is an example of a script that can be run as a postinst hook,
# and manages the symbolic links in a manner similar to the kernel
# image default behaviour, except that the latest two versions (as
# determined by ls -lct) are kept. You can modify this script 
# 
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Manoj Srivastava
# Copyright 2009 Darren Salt

set -e

# The dir where symlinks are managed
SYMLINKDIR=/

if [ $# -ne 2 ]; then
    echo Usage: $0 version location
    exit 2
fi

version="$1"
vmlinuz_location="$2"
vmlinuz_dir="$(dirname "$2")"

cd $SYMLINKDIR || exit 1

if [ -n "$DEB_MAINT_PARAMS" ]; then
    eval set -- "$DEB_MAINT_PARAMS"
fi

if [ -z "$1" ] || [ "$1" != "configure" ]; then
    exit 0;
fi

rm -f vmlinuz vmlinuz.old vmlinuz-rd vmlinuz-rd.old initrd.img initrd.img.old 

# Create a temporary file safely
if [ -x /bin/tempfile ]; then
    outfile=$(tempfile -p outp -m 0600);
else
    set -e
    mkdir /tmp/kernel-image-$version-$$
    outfile=/tmp/kernel-image-$version-$$/output
fi

(cd "$vmlinuz_dir" && ls -ct vmlinuz-*) > $outfile

STD="$(head -n 1 $outfile |             sed 's/vmlinuz-//')" 
OLD="$(head -n 2 $outfile | tail -n 1 | sed 's/vmlinuz-//')" 

if [ "X$STD" = "X" ]; then
    exit 0;
fi

# If you want version-specific links, here's how to start
STD24="$(grep vmlinuz-2.4 $outfile | head -n 1 | sed 's/vmlinuz-//')" || true
OLD24="$(grep vmlinuz-2.4 $outfile | head -n 1 | tail -n 1 | sed 's/vmlinuz-//')" || true

STD25="$(grep vmlinuz-2.5 $outfile | head -n 1 | sed 's/vmlinuz-//')" || true
OLD25="$(grep vmlinuz-2.5 $outfile | head -n 1 | tail -n 1 | sed 's/vmlinuz-//')" || true

echo Booting $STD, old is $OLD

if [ -f "$vmlinuz_dir/"initrd.img-$STD ] ; then 
   ln -s "$vmlinuz_dir/"initrd.img-$STD initrd.img
   ln -s "$vmlinuz_dir/"vmlinuz-$STD vmlinuz-rd
else
   ln -s "$vmlinuz_dir/"vmlinuz-$STD vmlinuz
fi

if [ "X$OLD" != "X" ]; then
    if [ -f "$vmlinuz_dir/"initrd.img-$OLD ] ; then
	ln -s "$vmlinuz_dir/"initrd.img-$OLD initrd.img.old
	ln -s "$vmlinuz_dir/"vmlinuz-$OLD vmlinuz-rd.old
    else
	ln -s "$vmlinuz_dir/"vmlinuz-$OLD vmlinuz.old
    fi
fi

# if [ "X$STD24" != "X" ]; then
#     if [ -f "$vmlinuz_dir/"initrd.img-$STD24 ] ; then 
# 	ln -s "$vmlinuz_dir/"initrd.img-$STD24 initrd24.img
# 	ln -s "$vmlinuz_dir/"vmlinuz-$STD24 vmlinuz24-rd
#     else
# 	ln -s "$vmlinuz_dir/"vmlinuz-$STD24 vmlinuz24
#     fi
# fi
# if [ "X$OLD24" != "X" ]; then
#     if [ -f "$vmlinuz_dir/"initrd.img-$OLD24 ] ; then
# 	ln -s "$vmlinuz_dir/"initrd.img-$OLD24 initrd24.img.old
# 	ln -s "$vmlinuz_dir/"vmlinuz-$OLD vmlinuz24-rd.old
#     else
# 	ln -s "$vmlinuz_dir/"vmlinuz-$OLD vmlinuz24.old
#     fi
# fi

# Run boot loaders here.
#lilo

rm -f $outfile 
if [ -d /tmp/kernel-image-$version-$$ ]; then
    rmdir /tmp/kernel-image-$version-$$
fi

exit 0
"""]]
#+END_HTML


